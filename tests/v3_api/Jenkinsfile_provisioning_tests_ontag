#!groovy

// RANCHER_VERSION resolution is first via Jenkins Build Parameter RANCHER_VERSION fed in from console,
// then from $DOCKER_TRIGGER_TAG which is sourced from the Docker Hub Jenkins plugin webhook.
def rancher_version() {
  try { if ('' != RANCHER_VERSION) { return RANCHER_VERSION } }
  catch (MissingPropertyException e) {}

  try { return DOCKER_TRIGGER_TAG }
  catch (MissingPropertyException e) {}

  echo  'Neither RANCHER_VERSION nor DOCKER_TRIGGER_TAG have been specified!'
  error()
}

def lastBuildResult() {
 def previous_build = currentBuild.getPreviousBuild()
  if ( null != previous_build ) { return previous_build.result } else { return 'UKNOWN' }
}

def via_webhook() {
  try {
    def foo = DOCKER_TRIGGER_TAG
    return true
  } catch(MissingPropertyException) {
    return false
  }
}

// Filter out Docker Hub tags like 'latest', 'master', 'enterprise'.
// Just want things like v1.2*
def rancher_version = rancher_version()
def String rancher_version_regex = "^v[\\d]\\.[\\d]\\.[\\d][\\-rc\\d]+\$"

if ( true == via_webhook() && (!(rancher_version ==~ rancher_version_regex)) ) {
  println("Received RANCHER_VERSION \'${rancher_version}\' via webhook which does not match regex \'${rancher_version_regex}\'.")
  println("** This will **not** result in a pipeline run.")
  currentBuild.result = lastBuildResult()
} else {
    jobs = [:]

    node {
        wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm', 'defaultFg': 2, 'defaultBg':1]) {
            stage('Checkout') {
                deleteDir()
                checkout scm
            }

            try {
                stage('Configure and build') {
                    sh "./tests/v3_api/scripts/configure.sh"
                    sh "mkdir -p .ssh && echo \"${AWS_SSH_PEM_KEY}\" > .ssh/${AWS_SSH_KEY_NAME} && chmod 400 .ssh/*"
                    sh "./tests/v3_api/scripts/build.sh"
                }

                stage('Deploy Rancher server') {
                    sh "docker run --name ${JOB_NAME}${BUILD_NUMBER} -t --env-file .env rancher-validation-tests " +
                       "/bin/bash -c \'export RANCHER_SERVER_VERSION=${rancher_version} && pytest -v -s --junit-xml=setup.xml " +
                       "-k test_deploy_rancher_server tests/v3_api/\'"
                    sh "docker cp ${JOB_NAME}${BUILD_NUMBER}:/src/rancher-validation/tests/v3_api/rancher_env.config ."
                    load "rancher_env.config"
                }

                stage('Run provisioning tests') {
                    params = [ string(name: 'CATTLE_TEST_URL', value: "${CATTLE_TEST_URL}"),
                               string(name: 'ADMIN_TOKEN', value: "${ADMIN_TOKEN}"),
                               string(name: 'RANCHER_SERVER_VERSION', value: "${rancher_version}") ]

                    jobs["custom"] = { build job: 'v3_test_custom_cluster', parameters: params}
                    jobs["do"] = { build job: 'v3_test_do_cluster', parameters: params }
                    jobs["ec2"] = { build job: 'v3_test_ec2_cluster', parameters: params }
                    jobs["az"] = { build job: 'v3_test_az_cluster', parameters: params }

                    parallel jobs
                }

                // collect results

                stage('Test Report') {
                    sh "docker cp ${JOB_NAME}${env.BUILD_NUMBER}:/src/rancher-validation/setup.xml ."
                    step([$class: 'JUnitResultArchiver', testResults: '**/setup.xml'])
                    sh "docker rm -v ${JOB_NAME}${env.BUILD_NUMBER}"
                }
            } catch(err) {
                sh "docker stop ${JOB_NAME}${env.BUILD_NUMBER}"
                sh "docker rm -v ${JOB_NAME}${env.BUILD_NUMBER}"
            }
        }
    }
}
